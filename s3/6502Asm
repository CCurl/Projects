xX

0( Registers )
0( rH: "Here" )
0( rA: Accumulator )
0( rX: X register )
0( rY: Y register )
0( rF: Status Register )
0( rS: Stack Pointer )
0( rP: Program counter )
0( rL: Cycles )

:CODE 0@1[nc@#,59=("%n")];
:RL 0@100+#|6502Asm|\xL;

h200:vORG; 0(Offset on 6502)
8000:vMEM;
100:vJT;
0(a--b) :MGET vMEM+c@;
0(b a--):MSET vMEM+c!;
:BCOM 0(b--)  rH MSET iH;
:WCOM 0(w--)  256 & BCOM BCOM;

:LDAI 0(b--) hA9 BCOM BCOM;
:LDXI 0(b--) hA2 BCOM BCOM;
:LDYI 0(b--) hA0 BCOM BCOM;
:DEX  0(--)  hCA BCOM;
:DEY  0(--)  h88 BCOM;
:STAZ 0(b--) h85 BCOM BCOM;
:INCZ 0(n-)  hE6 BCOM BCOM;
:BNE  0(a--) hD0 BCOM rH - d BCOM;
:JMP  0(a--) h4C BCOM WCOM;

:JTSET  0(a n--) vJT+!;
:JTGET  0(a--n)  vJT+@;
:JTJMP  0(a--)   vJT+@q<;
256 0[0 n JTSET]
0(--b):NI rPiPMGET;
0(n--):CYC rL+sL;

0(--n):CF  rF1b&;
0(n--):CS  rF1b|sF;
0(n--):CLC rFhFEb&sF;

0(--n):ZF  rF2b&;
0(n--):ZS  rF2b|sF;
0(n--):ZCL rFhFDb&sF;

0(--n):NF  rF128b&;
0(n--):NS  rFh80b|sF;
0(n--):NCL rFh7Fb&sF;

0(--n):VF  rF64b&;
0(n--):VS  rF64b|sF;
0(n--):VCL rFhBFb&sF;

0(n--):SETF ##(ZCL)~(ZS)h80b&(NS^)NCL;

0(Normalize SP):NSP rS hFF b& sS;
0(PS: Push [n--]):PS rS h100+ MSET dS NSP;
0(PP: Pop  [--n]):PP iS NSP rs h100+ MGET;

:_NI #sASETF;               hA9 JTSET  0(LDAi)
:_NI #sXSETF;               hA2 JTSET  0(LDXi)
:_NI #sYSETF;               hA0 JTSET  0(LDYi)
:_rA NI MSET;               h85 JTSET  0(STAz)
:_dX rX SETF;               hCA JTSET  0(DEX)
:_dY rY SETF;               h88 JTSET  0(DEY)
:_NI s1ZF~(r1256-rP+sP);    hD0 JTSET  0(BNE)
:_NI vMEM+#c@i#SETF$c!;     hE6 JTSET  0(INCz)
:_NI NI 256*+sP;            h4C JTSET  0(JMP)
:_rAPS;                     h48 JTSET  0(PHA)
:_PPsA;                     h68 JTSET  0(PLA)
:_rFPS;                     h08 JTSET  0(PHP)
:_PPsF;                     h28 JTSET  0(PLP)

vORG sH
    0  LDAI
    8   STAZ
    9   STAZ
rH s0
    hFF LDXI
rH s1
    hFF LDYI
rH s2
    8   INCZ
        DEY
    r2  BNE
        DEX
    r1  BNE
    9   INCZ
    r0  JMP

:CR "%n";
:MIL 1000#**;
:REGS NF ZF rY rX rA rP MGET rP "%nP:%x (%x) A:%d, X:%d Y:%d ZF:%d NF:%d ";
:DUMP rH vORG[n MGET "%x "];

:EMU 0(n a--) sP hFF sS 0sL 0[NI JTJMP];
:GO xT$ DUMP vORG EMU "%n8:" 8 MGET . xT$-" (%d ms)" REGS;
1 MIL GO
