0(Genetic evolution)

0(Save the current state)
 1`BL
10`BL
0(------------------------------------------------------------------------------)

:-Random numbers-;
:-Random 8/16-bit #-;
:RNB 256`R;
:RNW 32768`R;
:-connection[0|1][0-32]-;
:RCN RNB 159&;
:RNN RCN RCN;
:-Random world x/y (--n)-;
:RWX wsx@`R1+;         
:RWY wsy@`R1+;

0(----------------------------------------)
:-world stuff-;
150 wsx!
 40 wsy!
wsx@ wsy@ * wsz!       0(world size)
VAR wld! wsz@ ALT
:-normalize x/y-;
:WXN 0 MAX wsx@ MIN;   0(World X normalize (--x))
:WYN 0 MAX wsy@ MIN;   0(World Y normalize (--y))
:-world set/get at x/y-;
:WST $wsx@*+wld@+`!;   0(World Set (c x y--))
:WGT $wsx@*+wld@+`@;   0(World Get (x y--c))

0(----------------------------------------)
0(----- connections -----)

0(A connection is a single 32-bit value)
0([input]      [output]      [weight])
0([type] [id]  [type] [id]   [weight]
0([0]    [1-7] [8]    [9-15] [16-31])
0(type 1:hidden, 0: input/output)

:-connection/nodes-;
0(num connections)
8 ncn!
:-Type/ID (n--t id)-;
:TID 128`/;
:-connection weight (a--w)-;
:CWT 3+RW;
:-dump connection DCN (a--)-;
:DCT TID$"(".",".")";
:DCN #`@N" in:"DCT 1+#`@", out:"DCT 1+WDR", wt:".;

0(----------------------------------------)
:-critters-;
0(Critter structure: 4 bytes + connections)
0([x][y][col][0][connections])

0(num critters)
100 ncr!
0(critter size)
ncn@ `iC* 4+ csz!

0(Current critter)
VAR cr!  0 CM
0(Critters)
VAR crs! 0 CM
ncr@ csz@ * ALT

:-Get/Set SCR(n--), CC(--a)-;
:SCR 1-csz@*crs@+cr!;  0((n--) Set Critter)
:CC cr@;               0((--a) Current Critter)

:-Critter X/Y-;
:CXY CC `@ CC 1+ `@;   0(Critter Get XY(--x y))
:CSX WXN CC  `!;       0(Critter Set X(n--))
:CSY WYN CC1+`!;       0(Critter Set Y(n--))
:RXY RWX CSX RWY CSY;  0(Critter Set Random XY(--))

:-Critter Painting-;
:CRP CXY GXY CC3+`@31+40STC"*";
:PAC COF CLS 1 ncr@[i@ SCR CRP]CLC CON;    0(Paint All Critters)

:-Create Random Critter(s)-;
:CRC RXY 8`R CC3+`! CC4+t! 1 ncn@4*[RNN t@`! t@1+`! RNW t@2+WDW t@4+t!];
:RAC 1 ncr@[i@ SCR CRC];

:-Dump Critter(s)-;
:DCR CXY$"x:".",y:"."," CC 4+t! 1 ncn@[t@ DCN t@4+t!]N;
:DAC 1 ncr@[i@ # SCR "Critter #".": " DCR N];

:-Flip one random bit (a--b)-;
:FB ne`# 1 8`R SHL %% & (~&;)|;

:-(a--b) Copy 1 byte w/possible mutation-;
:CPB 125`R7=(FB;);
0(:CPB 125`R7=("-"#.","FB#."-";);)

:-Copy Current Critter to Critter #T (T--)-;
:CPC CC fc! SCR CC tc! fc@cr! fc@4+fc! tc@4+tc! 1 ncn@4*[fc@`@ CPB tc@`! fc`# tc`#];

0(N C R N)
RAC
:T 1 SCR 2 CPC;
:TT # 1[0ne! # 1[T] ne@." "]\;
:TF # 1[0ne! # 1[T ne@(1 SCR DCR 2 SCR DCR 0ne!)]]\;
100 TT
0(PAC)

:--RELOAD BLOCK--;
:RL 400 `BL;
