************************************
*     S4 Reference                 *
************************************

*** ARITHMETIC ***
+  (a b--a+b)     addition
-  (a b--a-b)     subtraction
*  (a b--a*b)     multiplication
/  (a b--a/b)     division
k  (T--n)         multiply TOS by 1000
o  (T--n)         set TOS to (-T)
p  (T--n)         increment TOS by 1
q  (T--n)         decrement TOS by 1
s  (a n--q r)     q: a/n, r: a MODULO n (/MOD)
u  (T--n)         set TOS the absolute value of T


*** BIT MANIPULATION ***
&  (a b--n)       and
|  (a b--n)       or
^  (a b--n)       xor
f  (n1--n2)       flip bits: (one's complement) (e.e - 1011 => 0100)
r  (v n--t)       t: v SHIFT-RIGHT n
v  (v n--t)       t: v SHIFT-LEFT n


*** STACK ***
#  (a--a a)       Duplicate TOS                          (Forth DUP)
\  (a b--a)       Drop TOS                               (Forth DROP)
$  (a b--b a)     Swap top 2 stack items                 (Forth SWAP)
%  (a b--a b a)   Push 2nd                               (Forth OVER)
xS (?--)          Clear the stack, remove all entries    (Forth 0SP)


*** MEMORY ***
  NOTEs: There are 3 address spaces, CODE, VAR, and ABSOLUTE
         CODE and MEMORY addresses are indexes into that specific area of memory
         ABSOLUTE addresses are the addresses of the entire machine

          ** these use 8-bit indexing **
       E.G. - '7 4 * c@' returns the lowest byte of HERE
c@    (a--n)      Fetch byte n from VAR address a
c!    (n a--)     Store byte n  to  VAR address a
d@    (a--n)      Fetch byte n from CODE address a
d!    (n a--)     Store byte n  to  CODE address a
a@    (a--n)      Fetch byte n from ABSOLUTE address a
a!    (n a--)     Store byte n  to  ABSOLUTE address a
m@    (a--n)      Fetch long n from ABSOLUTE address a
m!    (n a--)     Store long n  to  ABSOLUTE address a

          **these use 32-bit indexing **
       E.G. - '7 @' returns the value of HERE
@     (a--n)      Fetch long from VAR address a
!     (n a--)     Store long n to VAR address a


*** REGISTERS ***
  NOTES: The registers are stored in VAR addresses [0..25]
         Register initial values:
         - C: Size of CODE area
         - D: Start of CODE area
         - F: Start of FUNCTIONS array
         - H: HERE **special**
         - M: Start of VARS area
         - N: Size of FUNCTIONS array
         - S: Start of system structure
         - V: First available VAR address (byte address)
         - Z: Size of VARS area
         - All other registers set to 0
X   (--n)         Push value of register X (X:[A..Z])
X+  (--n)         Push value of register X, then increment the register by 1
X-  (--n)         Push value of register X, then decrement the register by 1
X;  (n--)         Set register X value to n


*** FUNCTIONS ***
  NOTES: 1) Function names are exactly 3 characters: X##
         2) A function cannot have '}' embedded in it (eg - {273 "TE}ST"} will not compile correctly)
            Use {273 "TE"125,"ST"} instead
{X## (--)         Define function XXX (XX:[000..999])
}    (--)         End of function definition
:X## (--)         Call function XXX
jX## (--)         Jump to function XXX (eg - tail call optimization)
e    (A--)        Call address A
;    (--)         Return from function immediately (i.e. - before reaching '}')
                  NOTE: returning while inside of a loop is not supported; behavior will be undefined.
                  NOTE: outside of a function, ';' can be used fo comment out the rest of the line
**BROKEN**   xFN  (n1--n2)     Resolve the function code address for function #n1. 0 means not defined.


*** INPUT/OUTPUT ***
.     (N--)       Output N as decimal number
,     (N--)       Output N as character (Forth EMIT)
b     (--)        Output a BLANK (32,)
n     (--)        Output a NEWLINE (13,10,)
z     (A--)       Output the NULL terminated string at A.
**BROKEN**   ?     ( --key)    Read one key, don't wait for ENTER. ()
"     (--)        Output characters until next '"'
_     (a1--a2)    String: copy string to address (a1) (eg - 1000_hello_)
                    Pushes address (a2) after terminating NULL
hX    (--n)       Scan HEX number X until non hex-digit (not case-sensitive, h3Da0 == h3dA0 )
0..9  (--n)       Scan DECIMAL number until non digit
                     to specify multiple values, separate them by space (4711 3333)
                     to enter a negative number, use 'o' (eg - '32o')
'x   (--n)        Push the ascii value of x (x: [any char possible])


*** CONDITIONS/FLOW CONTROL ***
<   (a b--f)      f: (a < b) ? 1 : 0;
=   (a b--f)      f: (a = b) ? 1 : 0;
>   (a b--f)      f: (a > b) ? 1 : 0;
~   (x--f)        f: (x = 0) ? 1 : 0;
(   (f--)         if (f != 0), execute code in '()', else skip until ')'
          NOTES: 1. You can NOT nest IFs
                 2. '()' cannot have ')' embedded in in (EG - a@("TE)ST"1-) fails when a=0)
                    USE a@("TE"41,"ST") instead
[   (F T --)     FOR: start a For/Next loop. if (T < F), swap F and T 
]   ( -- )       NEXT: increment index (xI) and loop if (xI < T)
          NOTE: For loops CAN be nested
xI  ( -- n)      Index: push the index of the current FOR loop
xJ  ( -- n)      Index: push the index of the 1st inner FOR loop
xK  ( -- n)      Index: push the index of the 2nd inner FOR loop
j   (X##--)      Jump to function X##
[[  (f--f)        Begin WHILE loop. If (f==0), skip code until ']]'
]]  (f--)         if (f != 0), repeat the loop, else drop f and continue.
          NOTES: 1. You can NOT nest LOOPs
                 2. '[[]]' cannot have a ']' embedded in it (EG - X[["TE]ST"1-]] fails when a=0)
                    USE X[["TE"93,"ST"1-]] instead.
                 3. To put a FOR loop in a WHILE loop, put it into a function.


*** OTHER ***
iA    (--)         Info: All (CFMRS)
iC    (--)         Info: Code
iF    (--)         Info: Functions
iM    (--)         Info: Memory
iR    (--)         Info: Registers
iS    (--)         Info: Stack
l     (n--)        Load code from block (block.nnn)
t     (--n)        Time (Arduino: millis(), Windows: GetTickCount())
w     (n--)        Wait (Arduino: delay(),  Windows: Sleep())
xFO   (fn md--fh)  PC-File: open (fn/md: addr of name/mode, use `S"")
xFR   (fh--c n)    PC-File: read 1 char (n=0 means EOF)
xFW   (c fh--)     PC-File: write 1 char
xFC   (fh--)       PC-File: close
xPI   (p--)        Arduino: pin input  (pinMode(p, INPUT))
xPU   (p--)        Arduino: pin pullup (pinMode(p, INPUT_PULLUP))
xPO   (p--)        Arduino: pin output (pinMode(p, OUTPUT)
xPRA  (p--n)       Arduino: pin read analog  (n = analogRead(p))
xPRD  (p--n)       Arduino: pin read digital (n = digitalRead(p))
xPWA  (n p--)      Arduino: pin write analog  (analogWrite(p, n))
xPWD  (n p--)      Arduino: pin write digital (digitalWrite(p, n))
xT    (--)         Exit S4
xX    (--)         Reset S4 to initial state
