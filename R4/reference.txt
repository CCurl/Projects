************************************
*     R4 Reference                 *
************************************

*** ARITHMETIC ***
+   (a b--n)      n: a+b - addition
-   (a b--n)      n: a-b - subtraction
*   (a b--n)      n: a*b - multiplication
/   (a b--q)      q: a/b - division
M  (a b--r)       r: a%b - modulo
S  (a b--q r)     q: div(a,b), r: modulo(a,b)  (SLASH-MOD)


*** FLOATING POINT ***
F< (n--)          Float: data -> float stack
F> (n--)          Float: float -> data stack
F+ (a b--n)       Float: add
F- (a b--n)       Float: subtract
F* (a b--n)       Float: multiply
F/ (a b--n)       Float: divide
F. (n--)          Float: print top of fload stack


*** BIT MANIPULATION ***
b&  (a b--n)      n: a and b
b|  (a b--n)      n: a or b
b^  (a b--n)      n: a xor b
b~  (a--b)        b: not a      (e.g - 1011 => 0100)
L   (a n--b)      b: a << n     (Left-Shift)
R   (a n--b)      b: a >> n     (Right-Shift)


*** STACK ***
#  (a--a a)       Duplicate TOS             (DUP)
\  (a b--a)       Drop TOS                  (DROP)
$  (a b--b a)     Swap top 2 stack items    (SWAP)
%  (a b--a b a)   Push 2nd                  (OVER)
~  (a--b)         b: -a                     (Negate)
D  (a--b)         b: a-1                    (Decrement TOS)
I  (a--b)         b: a+1                    (Increment TOS)
A  (a--b)         b: abs(a)                 (Absolute value)


*** MEMORY ***
@     (a--n)      Fetch CELL n from address a
!     (n a--)     Store CELL n  to  address a
C@    (a--n)      Fetch BYTE n from address a
C!    (n a--)     Store BYTE n  to  address a


*** REGISTERS ***
  NOTES: 1) A register reference is 1-3 UPPERCASE characters [A..ZZZ]
         2) The number of registers is controlled by the NUM_REGS #define in "config.h"
         3) Register A is the same as register AAA, B <-> AAB, Z <-> AAZ
         4) r"TEST" will push the value of register AAA and then print TEST
rABC   (--v)      v: value of register ABC.
sABC   (v--)      v: store v to register ABC.
iABC   (--)       Increment register ABC.
dABC   (--)       Decrement register ABC.


*** LOCALS ***
    NOTES: 1) On each function call, 10 locals [0..9] are allocated.
           2) Locals are NOT initialized.
rN   (--v)      v: value of local #N.
sN   (v--)      v: store v to local #N.


*** FUNCTIONS ***
  NOTES: 1) A function reference is 1-3 UPPERCASE characters [A..ZZZ]
         2) The number of functions is controlled by the NUM_FUNCS #define in "config.h"
         3) Function A is the same as function AAA, B <-> AAB, Z <-> AAZ
         4) :"TEST"; will define function #0 (AAA).
:ABC  (--)        Define function ABC. Copy chars to (HERE++) until closing ';'.
cABC  (--)        Call function ABC.
;     (--)        Return: PC = rpop()
        NOTE: Returning while inside of a loop is not supported; behavior will be undefined. 
              Use '^' to exit the loop first.


*** INPUT/OUTPUT ***
.     (N--)       Output N as a decimal number
,     (N--)       Output N as a character (EMIT)
"     (--)        Output characters until the next '"'
B     (--)        Output a single SPACE (32,)
N     (--)        Output a single NEWLINE (13,10,)
K?    (--f)       f: non-zero if char is ready to be read, else 0.
K@    (--n)       n: Key char, wait if no char is available.
0..9  (--N)       Scan DECIMAL number N until non digit
                     to specify multiple values, separate them by space (4711 3333)
                     to enter a negative number, use "negate" (eg - 490~)
hXXX  (--N)       Scan HEX number N until non hex-digit ([0-9,A-F] only ... NOT [a-f])
'C    (n)         n: the ASCII value of C
`x    (a--a b)    Copy following chars until closing '`' to (a++).
                  a: address, b next byte after trailing NULL.


*** LOGICAL/CONDITIONS/FLOW CONTROL ***
<     (a b--f)    f: (a < b) ? 1 : 0;
=     (a b--f)    f: (a = b) ? 1 : 0;
>     (a b--f)    f: (a > b) ? 1 : 0;
_     (x--f)      f: (x = 0) ? 1 : 0; (logical NOT)
(     (f--)       if (f != 0), execute code in '()', else skip to matching ')'
X     (a--)       if (a != 0), execute/call function at address a
G     (a--)       if (a != 0), go/jump) to function at address a


*** FOR LOOPS ***
[     (F T--)     FOR: start a For/Next loop. if (T < F), swap T and F
rI    (--n)       n: the index of the current FOR loop
sI    (n--)       n: a new value for the index of the current FOR loop
^     (--)        EXIT for loop
]     (--)        NEXT: increment index (I) and loop if (I <= T)


*** WHILE LOOPS ***
{     (f--f)      BEGIN: if (f == 0) skip to matching '}'
^     (--)        EXIT while loop
}     (f--f?)     WHILE: if (f != 0) jump to matching '{', else drop f and continue


*** FILES ***
fO   (nm md--fh)  FILE: Open, nm: name, md: mode, fh: fileHandle
fC   (fh--)       FILE: Close, fh: fileHandle
fD   (nm--)       FILE: Delete
fR   (fh--c n)    FILE: Read, fh: fileHandle, c: char, n: num
fW   (c fh--n)    FILE: Write, fh: fileHandle, c: char, n: num
fS   (--)         FILE: Save Code
fL   (--)         FILE: Load Code
bL   (n--)        BLOCK: Load code from block file (Block-nnn.r4). This can be nested.


*** OTHER ***
xIAF  (--a)       INFO: Address where the function vectors begin
xIAH  (--a)       INFO: Address of the HERE variable
xIAR  (--a)       INFO: Address where the registers begin
xIAU  (--a)       INFO: Address there the user area begins
xIC   (--n)       INFO: CELL size
xIF   (--n)       INFO: Number of functions
xIH   (--a)       INFO: HERE
xIR   (--n)       INFO: Number of registers
xIU   (--n)       INFO: Size of user area
xLA   (--)        PC: Load Abort: to stop loading a block (eg - if the block has already been loaded)
xPI   (p--)       Arduino: pin input  (pinMode(p, INPUT))
xPU   (p--)       Arduino: pin pullup (pinMode(p, INPUT_PULLUP))
xPO   (p--)       Arduino: pin output (pinMode(p, OUTPUT)
xPRA  (p--n)      Arduino: pin read analog  (n = analogRead(p))
xPRD  (p--n)      Arduino: pin read digital (n = digitalRead(p))
xPWA  (n p--)     Arduino: pin write analog  (analogWrite(p, n))
xPWD  (n p--)     Arduino: pin write digital (digitalWrite(p, n))
xSR   (--)        R4 System Reset
xT    (--n)       Time (Arduino: millis(), Windows: GetTickCount())
xN    (--n)       Time (Arduino: micros(), Windows: N/A)
xW    (n--)       Wait (Arduino: delay(),  Windows: Sleep())
xR    (n--r)      r: a random number between 0 and n
                  NOTE: when n=0, r is the entire 32-bit number
xQ    (--)        PC: Exit R4
