************************************
*     S4 Reference                 *
************************************

*** ARITHMETIC ***
+   (a b--n)      n: a+b - addition
-   (a b--n)      n: a-b - subtraction
*   (a b--n)      n: a*b - multiplication
/   (a b--q)      q: a/b - division
M  (a b--r)       r: a%b - modulo
S  (a b--q r)     q: div(a,b), r: modulo(a,b) - /MOD


*** BIT MANIPULATION ***
&  (a b--n)       n: a and b
|  (a b--n)       n: a or b
^  (a b--n)       n: a xor b
~  (a--b)         b: not a (e.g - 1011 => 0100)


*** STACK ***
#  (a--a a)       Duplicate TOS             (Forth DUP)
\  (a b--a)       Drop TOS                  (Forth DROP)
$  (a b--b a)     Swap top 2 stack items    (Forth SWAP)
%  (a b--a b a)   Push 2nd                  (Forth OVER)
D  (a--b)         b: a-1                    (Decrement --)
P  (a--b)         b: a+1                    (Increment ++)
N  (a--b)         b: -a                     (Negate)
A  (a--b)         b: abs(a)                 (Absolute value)
L  (a n--b)       b: a << n                 (Left-Shift)
R  (a n--b)       b: a >> n                 (Right-Shift)


*** MEMORY ***
@     (a--n)      Fetch CELL n from address a
!     (n a--)     Store CELL n  to  address a
c@    (a--n)      Fetch BYTE n from address a
c!    (n a--)     Store BYTE n  to  address a
d     (a--)       Decrement CELL at address a (a--)
p     (a--)       Increment CELL at address a (a++)


*** REGISTERS ***
  NOTES: 1) Registers are referred to by the number on TOS when 'r' is encountered.
         2) The number of registers is controlled by the NUM_REGS #define in "config.h"
      Register initial values:
         -  7: Start of USER area (**special** HERE)
         -  8: Loop index (**special**)
         - 20: Start of USER area
         - 25: Size of USER area
         - All other registers are set to 0
r     (n--a)      a: address of register #n.
v     (n--v)      v: value of register #n.


*** FUNCTIONS ***
        NOTES: 1) Functions are referred to by the number on TOS when ':' or 'C' is encountered.
               2) The number of functions is controlled by the NUM_FUNCS #define in "config.h"
:     (n--)       Define function #n. Copy chars to (HERE++) until closing ';'.
C     (n--)       Call function #n.
;     (--)        Return: PC = rpop()
        NOTE: Returning while inside of a loop is not supported; behavior will be undefined. 
              Use 'w' or 'l' to exit the loop.
        NOTE: outside of ':...;', ';' can be used to comment out the rest of the line
f@    (n--a)      n: function #, a: address where the function starts
f!    (n a--)     n: function #, a: address where the function starts


*** INPUT/OUTPUT ***
.     (N--)       Output N as decimal number
,     (N--)       Output N as character (Forth EMIT)
"     (--)        Output characters until the next '"'
B     (--)        Output a single SPACE (32,)
E     (--)        Output a single NEWLINE (13,10,)
0..9  (--n)       Scan DECIMAL number n until non digit
                     to specify multiple values, separate them by space (4711 3333)
                     to enter a negative number, use "negate" (eg - 490`-)
hXXX  (--n)       Scan HEX number n until non hex-digit ([0-9,A-F] only ... NOT [a-f])
'x    (--n)       n: the ASCII value of x


*** CONDITIONS/LOOPS/FLOW CONTROL ***
<     (a b--f)    f: (a < b) ? 1 : 0;
=     (a b--f)    f: (a = b) ? 1 : 0;
>     (a b--f)    f: (a > b) ? 1 : 0;
_     (x--f)      f: (x = 0) ? 1 : 0; (logical NOT)
[     (F T--)     FOR: start a For/Next loop. if (T < F), swap T and F
I     (--n)       n: the index of the current FOR loop
8r    (--a)       a: address of the INDEX register
l     (--)        EXIT for loop
]     (--)        NEXT: increment index (I) and loop if (I <= T)
{     (f--f)      BEGIN: if (f == 0) skip to matching '}'
w     (--)        EXIT while loop
}     (f--f?)     WHILE: if (f != 0) jump to matching '{' else drop f and continue
(     (f--)       if (f != 0), execute code in '()', else skip to matching ')'


*** OTHER ***
xBL   (n--)       PC: Load code from file (Block-nnn.r4). This can be nested.
xBC   (h--)       PC: Block close
xBOR  (--h)       PC: Block open (read)
xBOW  (--h)       PC: Block open (write)
xBR   (h--c f)    PC: Block read one byte (f = 0 and c = 0 on EOF or error)
xBW   (c h--f)    PC: Block write one byte (f = 0 on error)
xLA   (--)        PC: Load Abort: to stop loading a block (eg - if the block has already been loaded)
xPI   (p--)       Arduino: pin input  (pinMode(p, INPUT))
xPU   (p--)       Arduino: pin pullup (pinMode(p, INPUT_PULLUP))
xPO   (p--)       Arduino: pin output (pinMode(p, OUTPUT)
xPRA  (p--n)      Arduino: pin read analog  (n = analogRead(p))
xPRD  (p--n)      Arduino: pin read digital (n = digitalRead(p))
xPWA  (n p--)     Arduino: pin write analog  (analogWrite(p, n))
xPWD  (n p--)     Arduino: pin write digital (digitalWrite(p, n))
xR    (--)        Reset R4
xT    (--n)       Time (Arduino: millis(), Windows: GetTickCount())
xN    (--n)       Time (Arduino: micros(), Windows: N/A)
xW    (n--)       Wait (Arduino: delay(),  Windows: Sleep())
xr    (--r)       r: a random number
xq    (--)        PC: Exit R4
